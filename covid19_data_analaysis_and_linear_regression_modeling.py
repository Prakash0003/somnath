# -*- coding: utf-8 -*-
"""covid19 Data Analaysis and Linear Regression Modeling

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10XzxHW15Cqr5nerDotXw4KfK-i7st9J2
"""

from PIL import Image
img = Image.open('/content/covid 19.jpg')
img

# @title Default title text
COVID-19 symptoms include fever, tiredness, aches & pains, sore throat, shortness of breath, and dry cough. Very few people might experience diarrhea, nausea,
 or a runny nose. Symptoms may appear 2-14 days after exposure

# import modules

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

# Load COVID-19 data

covid=pd.read_csv('/content/covid_19_india.csv')
covid.head()

covid['State/UnionTerritory'].unique()

# Filter data for Tamil Nadu

Tamil_Nadu = covid.loc[(covid['State/UnionTerritory']=='Tamil Nadu')]
Tamil_Nadu.head()

Tamil_Nadu.shape

Tamil_Nadu.info

Tamil_Nadu.isnull().sum()

# Plotly for visualization

import plotly.offline as py
import plotly.graph_objs as go
!pip install plotly

# Visualize cured and death rates

cured_rate = go.Scatter(x=Tamil_Nadu['Date'], y=Tamil_Nadu['Cured'],name='cured_rate')
death_rate = go.Scatter(x=Tamil_Nadu['Date'], y=Tamil_Nadu['Deaths'],name='death_rate')
py.iplot([cured_rate,death_rate])

# Encode categorical data

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
cols=['Date','Time','State/UnionTerritory']
for col in cols:
  Tamil_Nadu[col]=le.fit_transform(Tamil_Nadu[col])

# Split data into training and testing sets

from sklearn.model_selection import train_test_split
x=Tamil_Nadu.drop(columns=['Cured','State/UnionTerritory','ConfirmedIndianNational','ConfirmedForeignNational'])
y=Tamil_Nadu['Deaths']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
x_train.head()

# Train a Linear Regression mode

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)
prediction=model.predict(x_test)
prediction

np.ravel(y_test)

plot=pd.DataFrame({'Actual':np.ravel(y_test),'prediction':np.ravel(prediction)})

sns.histplot(data=prediction)